// los siguiente fue ejecutado desde paises.php en D:\wamp\www\caribetour\vista\frontend\paises.php
//var_dump( $_SERVER['DOCUMENT_ROOT']); // 'D:/wamp/www'
//var_dump(__DIR__); // 'D:\wamp\www\caribetour\vista\frontend'
//var_dump(__FILE__); // 'D:\wamp\www\caribetour\vista\frontend\paises.php'
//var_dump(getcwd()); // 'D:\wamp\www\caribetour\vista\frontend'


nota mySql:
se tiene que cambiar la variable sql_mode y quitar el valor ONLY_FULL_GROUP_BY, esto es para que permita agrupar sin la necesidad de meter todos los campos del select en el group by

consulta para sumar meses a las fechas
UPDATE fechas SET fecha = DATE_ADD(fecha,INTERVAL 2 MONTH)

consulta para restar meses a las fechas
SELECT *
FROM fechas
WHERE fecha <= CURDATE() 
AND fecha >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK)


consulta para el objeto DTO de fechas 


SELECT  
pfr.idProductoFechaRef,
pfr.idProducto,
pfr.idFechaSalida,
pfr.precioProveedor,
pfr.comision,
fs.fecha as fsalida,
fs.terminalSalida,
fs.terminalDestino,
fs.tasasSalida,
fs.tasasDestino,
pfr.idFechaVuelta,
fv.fecha as fvuelta,
fv.terminalSalida,
fv.terminalDestino,
fv.tasasSalida,
fv.tasasDestino
FROM  producto_fecha_ref pfr
left join fechas as fs on pfr.idFechaSalida = fs.idFecha 
left join fechas as fv on pfr.idFechaVuelta  = fv.idFecha


NOTA: la sentencia group by se queda con el ultimo registro sin ordenar ej;
id  | cli | pro
5   | 1   |   1
7   | 2   |   1
9   | 3   |   2

select cli, pro from tbl group by pro -> el resultado son los registros 7 y 9
select cli, pro from tbl group by pro order by cli ASC -> el resultado es el mismo que el anterior 7 y 9

==========
BLOG
==========
hacer que la imagen portada del blog tambien se guarde en tamaño reducido para hacer la imagen thumbnail


==========
SERVIDOR
==========
al momento de subir la web al SERVIDOR, hay que modificar el archivo caribetour\vista\frontend\includes\baselink.php y cambiar el protocolo de la url y ponerle https://www.caribetour.es


==========
DATATABLE
==========
se tiene que insertar el codigo del datatable en cada lister que se vaya a crear
ya que la configuracion de cada tabla se tiene que hacer desde ese codigo

para solicitar el objeto json que vamos a mostrar en la tabla, se hace mediante el siguiente codigo
teniendo en cuenta que el json es el siguiente:
{"data":[
    {"nombre":"", "apellidos":"", "tel":},
    {"nombre":"", "apellidos":"", "tel":},
    {"nombre":"", "apellidos":"", "tel":}
]}

$('#dynamic-table').DataTable({
    "columns": [
    {"data": "nombre"},
    {"data": "apellidos"},
    {"data": "tel"}
    ]
});

para obtener la data por ajax se utiliza el atributo "ajax", tambien se puede especificar el metodo de obtencion (post o get)
$('#dynamic-table').DataTable({
    "ajax": "http://dominio/data.json"
});

y especificando el metodo seria así
$('#dynamic-table').DataTable({
    "ajax": {
        "method": "POST",
        "url": "http://dominio/data.json(.php, .net, .js)" // el archivo puede tener diferentes extenciones pero el contenido tiene que ser json
    }
});



para hacer scroll horizontal, introducimos el siguiente codigo
$('#dynamic-table').DataTable({
    "sScrollX": "100%",
    "sScrollXInner": "100%",
});


los nombre de los atributos del DataTable tambien se pueden poner sin comillas (es preferible que sean con comillas)
$('#dynamic-table').DataTable({
    sScrollX: "100%",
    sScrollXInner: "100%",
});

metodo destroy, para poder reescribir o actualizar la DataTable (puede ser con un boton de actualizar) y así evitar que salga el error "DataTables warning. cannot reinitialise..."
$('#dynamic-table').DataTable({
    "destroy": true
});